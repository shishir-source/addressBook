{"version":3,"sources":["data/ContactList.js","ContactApp.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","ContactApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contactList","listLoaded","action","filterContacts","bind","assertThisInitialized","addContact","hide","editContact","renderAddContact","updateContact","_this2","ref","on","snapshot","contacts","forEach","childSnapshot","push","objectSpread","id","key","val","console","log","setState","e","preventDefault","search","target","value","trim","filter","contact","name","toLowerCase","includes","closest","childNodes","innerText","confirmAlert","title","message","concat","buttons","label","onClick","remove","postCode","substring","fetch","then","response","json","myJson","status","result","admin_county","document","getElementById","admin_district","renderForm","newContact","getPopupValues","set","updateContactDb","contactInfo","row","index","_React$createElement","_React$createElement2","react_default","a","createElement","rel","className","defineProperty","removeContact","_this3","type","placeholder","onChange","data-field","data-sortable","map","townCity","telephone","addressLine1","addressLine2","county","email","operateFormatter","fetchInfoByPostcode","popupForm","getElementsByClassName","blur","style","transition","clearInputs","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_ContactApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.966bd795.chunk.js","sourcesContent":["// data from firebase DB\r\nimport * as firebase from \"firebase\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDT3EmgtaIht2B2fZcg0TjeEy7Zg9zSRiA\",\r\n  authDomain: \"address-book-85e7d.firebaseapp.com\",\r\n  databaseURL: \"https://address-book-85e7d.firebaseio.com\",\r\n  projectId: \"address-book-85e7d\",\r\n  storageBucket: \"address-book-85e7d.appspot.com\",\r\n  messagingSenderId: \"230479373923\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const database = firebase.database();\r\n\r\n// function to get list of contacts from DB\r\n\r\n// function to add contact in DB\r\nexport const addContactDb = contact => {\r\n  database\r\n    .ref(`contacts`)\r\n    .push()\r\n    .set(contact);\r\n};\r\n\r\n// function to update contact in DB given id\r\nexport const updateContactDb = (contact, id) => {\r\n  database.ref(`contacts/${id}`).set(contact);\r\n};\r\n\r\n// dummy data\r\n\r\nexport const contact1 = {\r\n  //  Name, Address Line 1, Address Line 2, Town/City, County, Postcode, Telephone and Email.\r\n  name: \"Logan Stevenson\",\r\n  addressLine1: \"39 Broad Street\",\r\n  addressLine2: \"\",\r\n  townCity: \"LOWICK\",\r\n  county: \"Northumberland\",\r\n  postCode: \"TD15 2RJ\",\r\n  telephone: \"079 3758 4259\",\r\n  email: \"LoganStevenson@dayrep.com\"\r\n};\r\n\r\nexport const contact2 = {\r\n  name: \"Faith Stevens\",\r\n  addressLine1: \"39 Broad Street\",\r\n  addressLine2: \"35 George Street\",\r\n  townCity: \"BRYNGWYN\",\r\n  county: \" Monmouthshire\",\r\n  postCode: \"HR5 7QJ\",\r\n  telephone: \"079 4376 3854\",\r\n  email: \"FaithStevens@teleworm.us\"\r\n};\r\n\r\nexport const contact3 = {\r\n  name: \"Alexandra Wood\",\r\n  addressLine1: \"44 New Dover Rd\",\r\n  addressLine2: \"\",\r\n  townCity: \"WALDRIDGE\",\r\n  county: \"Durham\",\r\n  postCode: \"TD15 2RJ\",\r\n  telephone: \"078 1161 8272\",\r\n  email: \"AlexandraWood@teleworm.us\"\r\n};\r\n\r\nexport const contact4 = {\r\n  name: \"Freddie Scott\",\r\n  addressLine1: \"93 Henley Road\",\r\n  addressLine2: \"\",\r\n  townCity: \"BOURTON\",\r\n  county: \"Buckinghamshire\",\r\n  postCode: \"SN6 3JE\",\r\n  telephone: \"079 0494 1170\",\r\n  email: \"FreddieScott@teleworm.us\"\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport {\r\n  database,\r\n  ContactListApi,\r\n  contact1,\r\n  contact2,\r\n  contact3,\r\n  contact4,\r\n  addContactDb,\r\n  updateContactDb\r\n} from \"./data/ContactList\";\r\n\r\nclass ContactApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contactList: [],\r\n      listLoaded: false,\r\n      action: \"\" // edit or add contact\r\n    };\r\n\r\n    this.filterContacts = this.filterContacts.bind(this);\r\n    this.addContact = this.addContact.bind(this);\r\n    this.hide = this.hide.bind(this);\r\n    this.editContact = this.editContact.bind(this);\r\n    this.renderAddContact = this.renderAddContact.bind(this);\r\n    this.updateContact = this.updateContact.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*  adding 4 contacts to DB\r\n    \r\n    addContactDb(contact1);\r\n    addContactDb(contact2);\r\n    addContactDb(contact3);\r\n    addContactDb(contact4); */\r\n\r\n    // update state in real time from DB\r\n    database.ref(`contacts`).on(\"value\", snapshot => {\r\n      const contacts = [];\r\n      snapshot.forEach(childSnapshot => {\r\n        contacts.push({\r\n          id: childSnapshot.key,\r\n          ...childSnapshot.val()\r\n        });\r\n      });\r\n      console.log(contacts);\r\n      this.setState({ contactList: contacts, listLoaded: true });\r\n    });\r\n  }\r\n\r\n  // filter by name(for now it filters only data rendered, I still need implement filter using query on DB)\r\n  filterContacts(e) {\r\n    e.preventDefault();\r\n    let search = e.target.value.trim();\r\n    this.setState({\r\n      contactList: this.state.contactList.filter(contact =>\r\n        contact.name.toLowerCase().includes(search.toLowerCase())\r\n      )\r\n    });\r\n  }\r\n\r\n  //remove contact from DB\r\n  removeContact(e) {\r\n    e.preventDefault();\r\n    const ref = e.target;\r\n    const id = ref.closest(\"tr\").id;\r\n\r\n    const name = ref.closest(\"tr\").childNodes[1].innerText; // name of contact we are about to delete\r\n\r\n    confirmAlert({\r\n      title: \"\",\r\n      message: `Are you sure you want to delete contact ${name}?`,\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => {\r\n            database.ref(`contacts/${id}`).remove();\r\n          }\r\n        },\r\n        {\r\n          label: \"No\",\r\n          onClick: () => {}\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  //post code lookup for County and Town-City (this api doesn't return addresses)\r\n  fetchInfoByPostcode(e) {\r\n    e.preventDefault();\r\n    const postCode = e.target.value.trim().substring(0, 3);\r\n    console.log(postCode);\r\n    fetch(`https://api.postcodes.io/outcodes/${postCode}`)\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(myJson) {\r\n        // if lookup found data\r\n        if (myJson.status === 200) {\r\n          console.log(myJson.result.admin_county);\r\n          document.getElementById(\"town-city\").value =\r\n            myJson.result.admin_district[0];\r\n          document.getElementById(\"county\").value = myJson.result.admin_county;\r\n        }\r\n      });\r\n  }\r\n\r\n  renderAddContact(e) {\r\n    e.preventDefault();\r\n    this.setState({ action: \"add\" });\r\n    this.renderForm(e);\r\n  }\r\n\r\n  // add contact from popup form\r\n  addContact(e) {\r\n    e.preventDefault();\r\n\r\n    const newContact = this.getPopupValues();\r\n    addContactDb(newContact); // add contact to db\r\n    this.hide(); // close popup\r\n  }\r\n\r\n  updateContact(e) {\r\n    e.preventDefault();\r\n    const id = document.getElementById(\"id\").value;\r\n    const editContact = this.getPopupValues();\r\n    updateContactDb(editContact, id); // add contact to db\r\n    this.hide(); // close popup\r\n  }\r\n\r\n  editContact(e) {\r\n    this.setState({ action: \"edit\" });\r\n\r\n    this.renderForm(e);\r\n    //get id of clicked row\r\n    const id = e.target.closest(\"tr\").id;\r\n    // get tds of row clicked\r\n    const contactInfo = e.target.closest(\"tr\").childNodes;\r\n    // populate input fields based on contact row clicked\r\n    console.log(id);\r\n    document.getElementById(\"id\").value = id;\r\n    document.getElementById(\"town-city\").value = contactInfo[2].innerText;\r\n    document.getElementById(\"address1\").value = contactInfo[5].innerText;\r\n    document.getElementById(\"address2\").value = contactInfo[6].innerText;\r\n    document.getElementById(\"post-code\").value = contactInfo[4].innerText;\r\n    document.getElementById(\"county\").value = contactInfo[7].innerText;\r\n    document.getElementById(\"name\").value = contactInfo[1].innerText;\r\n    document.getElementById(\"email\").value = contactInfo[8].innerText;\r\n    document.getElementById(\"telephone\").value = contactInfo[3].innerText;\r\n  }\r\n\r\n  operateFormatter(value, row, index) {\r\n    return (\r\n      <div>\r\n        <a\r\n          rel=\"tooltip\"\r\n          title=\"Edit\"\r\n          className=\"table-action edit\"\r\n          title=\"Edit\"\r\n          onClick={this.editContact}\r\n        >\r\n          <i className=\"fa fa-edit\" />\r\n        </a>\r\n        <a\r\n          rel=\"tooltip\"\r\n          title=\"Remove\"\r\n          ref=\"delete\"\r\n          className=\"table-action remove\"\r\n          title=\"Remove\"\r\n          onClick={this.removeContact}\r\n        >\r\n          <i className=\"fa fa-remove\" />\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"blur\" />\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"fresh-table table-responsive full-color-orange\">\r\n                <div className=\"action\">\r\n                  <input\r\n                    type=\"search\"\r\n                    placeholder=\"Search name\"\r\n                    onChange={this.filterContacts}\r\n                  />\r\n                  <button\r\n                    className=\"btn-floating waves-effect waves-light add-btn\"\r\n                    onClick={this.renderAddContact}\r\n                  >\r\n                    Add Contact{\" \"}\r\n                  </button>\r\n                </div>\r\n\r\n                <table className=\"table table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th data-field=\"id\">ID</th>\r\n                      <th data-field=\"name\" data-sortable=\"true\">\r\n                        Name\r\n                      </th>\r\n                      <th data-field=\"CityTown\" data-sortable=\"true\">\r\n                        City/Town\r\n                      </th>\r\n                      <th data-field=\"Telephone\" data-sortable=\"true\">\r\n                        Telephone\r\n                      </th>\r\n                      <th data-field=\"postCode\" data-sortable=\"true\">\r\n                        Postcode\r\n                      </th>\r\n                      <th data-field=\"address1\" data-sortable=\"true\">\r\n                        Address1\r\n                      </th>\r\n                      <th data-field=\"address2\" data-sortable=\"true\">\r\n                        Address2\r\n                      </th>\r\n\r\n                      <th data-field=\"County\">County</th>\r\n                      <th data-field=\"email\" data-sortable=\"true\">\r\n                        Email\r\n                      </th>\r\n                      <th data-field=\"actions\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {this.state.listLoaded > 0 &&\r\n                      this.state.contactList.map((contact, index) => (\r\n                        <tr key={index} id={contact.id} name={contact.name}>\r\n                          <td>{index + 1}</td>\r\n                          <td>{contact.name}</td>\r\n                          <td>{contact.townCity}</td>\r\n                          <td>{contact.telephone}</td>\r\n                          <td>{contact.postCode}</td>\r\n                          <td>{contact.addressLine1}</td>\r\n                          <td>{contact.addressLine2}</td>\r\n                          <td>{contact.county}</td>\r\n                          <td>{contact.email}</td>\r\n                          <td>{this.operateFormatter()}</td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* Form that will pop up when we click on add contact button  */}\r\n\r\n          <div className=\"popup-form\">\r\n            <div className=\"fresh-table full-color-orange\">\r\n              <form className=\"col s12 popup-input\">\r\n                <h4 className=\"heading\">\r\n                  {this.state.action === \"add\"\r\n                    ? \"Add a contact\"\r\n                    : \"Update contact\"}\r\n                  <a\r\n                    rel=\"tooltip\"\r\n                    title=\"Remove\"\r\n                    className=\"table-action remove right\"\r\n                    onClick={this.hide}\r\n                    title=\"Remove\"\r\n                  >\r\n                    <i className=\"fa fa-remove \" />\r\n                  </a>\r\n                </h4>\r\n                <hr className=\"hr\" />\r\n                <div className=\"row\">\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"id\"\r\n                      type=\"hidden\"\r\n                      ref=\"id\"\r\n                      className=\"validate\"\r\n                    />\r\n                    <input\r\n                      id=\"name\"\r\n                      type=\"text\"\r\n                      ref=\"name\"\r\n                      className=\"validate\"\r\n                      placeholder=\" Name\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"town-city\"\r\n                      type=\"text\"\r\n                      ref=\"town\"\r\n                      className=\"validate\"\r\n                      placeholder=\"City/Town\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"telephone\"\r\n                      type=\"text\"\r\n                      ref=\"telephone\"\r\n                      className=\"validate\"\r\n                      placeholder=\"Telephone\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"input-field col s8\">\r\n                    <input\r\n                      id=\"address1\"\r\n                      type=\"text\"\r\n                      ref=\"address1\"\r\n                      className=\"validate\"\r\n                      placeholder=\" Address1\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"post-code\"\r\n                      type=\"text\"\r\n                      ref=\"postCode\"\r\n                      className=\"validate\"\r\n                      placeholder=\" Postcode\"\r\n                      onChange={this.fetchInfoByPostcode} // fetch town and county by postcode and populate inputs\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"input-field col s8\">\r\n                    <input\r\n                      id=\"address2\"\r\n                      type=\"text\"\r\n                      ref=\"address2\"\r\n                      className=\"validate\"\r\n                      placeholder=\" Address2\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"county\"\r\n                      type=\"text\"\r\n                      ref=\"country\"\r\n                      className=\"validate\"\r\n                      placeholder=\" County\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                {/* dynamic funtion call based on action add or edit contact */}\r\n                <div className=\"row\">\r\n                  <button\r\n                    className=\"btn-floating waves-effect waves-light add-btn\"\r\n                    onClick={\r\n                      this.state.action === \"add\"\r\n                        ? this.addContact\r\n                        : this.updateContact\r\n                    }\r\n                  >\r\n                    {/* dynamic label based on action add or edit contact */}\r\n                    {this.state.action === \"add\"\r\n                      ? \"Add Contact\"\r\n                      : \"Update Contact\"}\r\n                  </button>\r\n                  <div className=\"input-field col s4\">\r\n                    <input\r\n                      id=\"email\"\r\n                      type=\"text\"\r\n                      ref=\"email\"\r\n                      className=\"validate\"\r\n                      placeholder=\" Email\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderForm(e) {\r\n    e.preventDefault();\r\n    var popupForm = document.getElementsByClassName(\"popup-form\")[0];\r\n    var blur = document.getElementsByClassName(\"blur\")[0];\r\n    blur.style = \"opacity : 1; z-index: 10\";\r\n    blur.style.transition = \"opacity .5s ease,z-index .5s ease\";\r\n    popupForm.style = \"opacity : 1; z-index: 10\";\r\n    popupForm.style.transition = \"opacity .5s ease,z-index .5s ease\";\r\n  }\r\n  hide() {\r\n    var popupForm = document.getElementsByClassName(\"popup-form\")[0];\r\n    var blur = document.getElementsByClassName(\"blur\")[0];\r\n    blur.style = \"opacity : 0; z-index: -9\";\r\n    blur.style.transition = \"opacity .5s ease,z-index .5s ease\";\r\n    popupForm.style = \"opacity : 0; z-index: -10\";\r\n    popupForm.style.transition = \"opacity .5s ease,z-index .5s ease\";\r\n    this.clearInputs(); // clear all inputs of form\r\n  }\r\n\r\n  clearInputs() {\r\n    document.getElementById(\"town-city\").value = \"\";\r\n    document.getElementById(\"address1\").value = \"\";\r\n    document.getElementById(\"address2\").value = \"\";\r\n    document.getElementById(\"post-code\").value = \"\";\r\n    document.getElementById(\"county\").value = \"\";\r\n    document.getElementById(\"name\").value = \"\";\r\n    document.getElementById(\"email\").value = \"\";\r\n    document.getElementById(\"telephone\").value = \"\";\r\n  }\r\n\r\n  getPopupValues() {\r\n    return {\r\n      townCity: document.getElementById(\"town-city\").value,\r\n      addressLine1: document.getElementById(\"address1\").value,\r\n      addressLine2: document.getElementById(\"address2\").value,\r\n      postCode: document.getElementById(\"post-code\").value,\r\n      county: document.getElementById(\"county\").value,\r\n      name: document.getElementById(\"name\").value,\r\n      email: document.getElementById(\"email\").value,\r\n      telephone: document.getElementById(\"telephone\").value\r\n    };\r\n  }\r\n}\r\n\r\nexport default ContactApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ContactApp from \"./ContactApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<ContactApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}